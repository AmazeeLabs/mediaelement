<?php
// $Id$

/**
 * @file
 * Provides HTML5 video and audio elements using Mediaelement.js for HTML4 browsers.
 */

/**
 * Implements hook_menu().
 */
function mediaelement_menu() {
  return array(
    'admin/config/media/mediaelement' => array(
      'title' => 'MediaElement.js',
      'description' => 'Settings for MediaElement.js integration with Drupal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mediaelement_admin_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'mediaelement.admin.inc',
    ),
  );
}

/**
 * Implements hook_library().
 */
function mediaelement_library() {
  $path = libraries_get_path('mediaelement');
  $libraries = array();

  $libraries['mediaelement'] = array(
    'title' => 'Media Element',
    'website' => 'http://mediaelementjs.com/',
    'version' => '7.x',
    'js' => array(
      $path . '/src/mediaelement.js' => array('weight' => JS_LIBRARY - 5),
      $path . '/src/mediaelementplayer.js' => array('weight' => JS_LIBRARY - 5),
    ),
    'css' => array(
      $path . '/src/mediaelementplayer.css'
    ),
  );
  return $libraries;
}

/**
 * Implements hook_init().
 */
function mediaelement_init() {
  // When the media player is set to be on all pages add it to the page.
  if (variable_get('mediaelement_sitewide', FALSE)) {
    drupal_add_library('mediaelement', 'mediaelement');
    drupal_add_js(drupal_get_path('module', 'mediaelement') . '/mediaelement.js');
    drupal_add_js(array('mediaelementAll' => TRUE), array('type' => 'setting'));
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function mediaelement_field_formatter_info() {
  $formatters = array();

  $formatters['mediaelement_video'] = array(
    'label' => t('MediaElement Video'),
    'field types' => array('file'),
    'settings' => array('height' => '500', 'width' => '500'),
  );

  $formatters['mediaelement_audio'] = array(
    'label' => t('MediaElement Audio'),
    'field types' => array('file'),
    'settings' => array('height' => '30', 'width' => '300'),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function mediaelement_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // A unique caller per page for the JS specific settings to use. This may be
  // different for ever page view and should not be used for styling.
  static $id = 0;
  $element = array();
  $path = drupal_get_path('module', 'mediaelement');
  foreach ($items as $delta => $item) {
    $settings = $display['settings'];
    if ($display['type'] == 'mediaelement_video') {
      $settings['videoHeight'] = (int)$settings['height'];
      $settings['videoWidth'] = (int)$settings['width'];
      unset($settings['height'], $settings['width']);
    }
    elseif ($display['type'] == 'mediaelement_audio') {
      $settings['audioHeight'] = (int)$settings['height'];
      $settings['audioWidth'] = (int)$settings['width'];
      unset($settings['height'], $settings['width']);
    }

    $class = 'mediaelement-formatter-identifier-' . time() . '-' . $id++;
    $element[$delta] = array(
      '#attributes' => array(
        'src' => file_create_url($item['uri']),
        'class' => $class,
      ),
      '#settings' => $settings,
      '#attached' => array(
        'library' => array(array('mediaelement', 'mediaelement')),
        'js' => array(
          $path . '/mediaelement.js' => array(),
          0 => array('type' => 'setting', 'data' => array('mediaelement' => array('.' . $class => $settings))),
        ),
      ),
    );

    if ($display['type'] == 'mediaelement_video') {
      $element[$delta]['#theme'] = 'mediaelement_video';
      $element[$delta]['#attributes']['height'] = $display['settings']['height'];
      $element[$delta]['#attributes']['width'] = $display['settings']['width'];
    }
    elseif ($display['type'] == 'mediaelement_audio') {
      $element[$delta]['#theme'] = 'mediaelement_audio';
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function mediaelement_theme() {
  return array(
    'mediaelement_video' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
    'mediaelement_audio' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
  );
}

function theme_mediaelement_video($variables) {
  return '<video ' . drupal_attributes($variables['attributes']) . ' ></video>';
}

function theme_mediaelement_audio($variables) {
  return '<audio ' . drupal_attributes($variables['attributes']) . ' ></audio>';
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function mediaelement_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );

  $form['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
    '#options' => $link_types,
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function mediaelement_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return t('Height: @height px, Width: @width px', array('@height' => $settings['height'], '@width' => $settings['width']));
}
